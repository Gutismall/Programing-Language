# Define functions
defun subtract(a, b) { a - b }
defun divide(a, b) { a / b }
defun fibonacci(n) {
    if (n <= 1) {
        return n
    } else {
        return fibonacci(n - 1) + fibonacci(n - 2)
    }
}

# Define a function to calculate the square of a number
defun square(x) { x * x }

# Define a function to add two numbers
defun add(a, b) { a + b }

# Define a function that applies a lambda to a number
defun apply_lambda_to_num(f, x) { f(x) }

# Function calls
subtract(15, 5)        # Expected output: 10
divide(40, 8)          # Expected output: 5
fibonacci(7)           # Expected output: 13 (0, 1, 1, 2, 3, 5, 8, 13)

# Lambda function calls
lambda x: x + 10(20)          # Expected output: 30
lambda f: f(4)(lambda x: x * 3) # Expected output: 12

# Nested function calls
lambda f: f(5)(lambda x: x - 3) # Expected output: 2

# Boolean and comparison operations
true && false  # Expected output: false
true || false  # Expected output: true
!false         # Expected output: true

!(3 == 3) && (3 != 4)  # Expected output: false
(3 < 4) || (4 > 3)   # Expected output: true
(3 <= 3) != true  # Expected output: false

# If-Else expressions
if (true){ return 1 }else{ return 0 }  # Expected output: 1
if (false){ return 1 }else{ return 0}  # Expected output: 0

